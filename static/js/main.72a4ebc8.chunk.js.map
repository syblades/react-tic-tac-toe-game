{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","value","onClick","onClickCallback","id","Board","squareList","squares","concat","map","square","generateSquareComponents","console","log","generateSquares","currentId","row","push","col","App","useState","setSquares","currentPlayer","setCurrentPlayer","gameWinner","setGameWinner","newSquares","i","length","j","checkForWinner","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.72a4ebc8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css';\n\nconst Square = (props) => {\n  const callback = () => {\n    props.onClickCallback(props.id);\n  };\n  return (\n    <button className=\"square\" data-pro={props.value} onClick={callback}>\n      {props.value}\n    </button>\n  );\n};\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n// This turns the 2D array into a 1D array\nconst generateSquareComponents = (squares, onClickCallback) => {\n  const singleArraySquares = [].concat(...squares);\n  return singleArraySquares.map((square) => {\n    return (\n      <Square\n        value={square.value}\n        id={square.id}\n        onClickCallback={onClickCallback}\n        key={square.id}\n      />\n    );\n  });\n};\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  console.log(squareList);\n  return <div className='grid'>{squareList}</div>;\n};\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired,\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'X';\nconst PLAYER_2 = 'O';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n\n  return squares;\n};\n\nconst App = () => {\n  // This starts state off as a 2D array of JS objects with\n  // empty value and unique ids.\n  const [squares, setSquares] = useState(generateSquares());\n\n  //update current player\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYER_1);\n\n  // sets the game winner\n  const [gameWinner, setGameWinner] = useState(null);\n\n  const checkForWinner = () => {\n    let i = 0;\n    // Check all the rows and columns for a winner\n    while (i < 3) {\n      if (\n        squares[i][0].value === squares[i][1].value &&\n        squares[i][2].value === squares[i][1].value &&\n        squares[i][0].value !== ''\n      ) {\n        return squares[i][0].value;\n      } else if (\n        squares[0][i].value === squares[1][i].value &&\n        squares[2][i].value === squares[1][i].value &&\n        squares[0][i].value !== ''\n      ) {\n        return squares[0][i].value;\n      }\n      i += 1;\n    }\n    // Check Top-Left to bottom-right diagonal\n    if (\n      squares[0][0].value === squares[1][1].value &&\n      squares[2][2].value === squares[1][1].value &&\n      squares[1][1].value !== ''\n    ) {\n      return squares[0][0].value;\n    }\n\n    // Check Top-right to bottom-left diagonal\n    if (\n      squares[0][2].value === squares[1][1].value &&\n      squares[2][0].value === squares[1][1].value &&\n      squares[1][1].value !== ''\n    ) {\n      return squares[0][2].value;\n    }\n\n    // Checks for a tie\n    for (let row of squares) {\n      for (let col of row) {\n        if (col.value === '') {\n          return null;\n        }\n      }\n    }\n    return 'Tie';\n  };\n\n  const resetGame = () => {\n    setSquares(generateSquares());\n    setGameWinner(null);\n  };\n\n  const updateSquares = (id) => {\n    console.log('click', id);\n    const newSquares = [...squares];\n\n    // returns early if a winner has been choosen\n    if (gameWinner !== null) {\n      return;\n    }\n\n    for (let i = 0; i < newSquares.length; i++) {\n      for (let j = 0; j < newSquares[i].length; j++) {\n        if (newSquares[i][j].id === id && newSquares[i][j].value === '') {\n          newSquares[i][j].value = currentPlayer;\n          // if square has been clicked this\n          // prevents it from being clicked again\n        } else if (newSquares[i][j].id === id) {\n          return;\n        }\n      }\n    }\n    setSquares(newSquares);\n    setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1);\n    setGameWinner(checkForWinner());\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>\n          {gameWinner === null\n            ? `Current player: ${currentPlayer}`\n            : gameWinner === 'Tie'\n            ? \"It's a Tie! Everyone Wins! üèÜ‚ú®\"\n            : `Winner is ${gameWinner} üéâ`}\n        </h2>\n        <button onClick={resetGame}>Play Again!</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={updateSquares} />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}